

use 'libs/string.baabnq';


put _OpAdd = 43;
put _OpSub = 45;
put _OpMul = 42;
put _OpDiv = 47;

put _StartLevel = 0;
put _StopLevel = 0;

jump Skip;

lab Parse;

    pull _ReturnAddr;
    pull _InputStr;
    push _ReturnAddr;

    "push _InputStr;
    "putchr 32;
    "sub String::PrintString;
    "putchr 10;

    "construct the node and alloc on the heap
    "mapping of the data inside the node
    "NPtr + 0  <type (0 operator; 1 value)>
    "NPtr + 1  <value or ascii of operator>
    "NPtr + 2  <subnode1>
    "NPtr + 3  <subnode2>
    new 4 _ThisNodePtr;

    "place the ptr to node on the stack as a return value
    pull _ReturnAddr;
    push _ThisNodePtr;
    push _ReturnAddr;


    "scaning does not call anything so we don't need that namespacing thing

    push _InputStr;
    sub String::StrLen;
    pull _InputSize;

    "scan for least bracketed operator
    put _LowBackLvl = 0 - 1;
    put _Temp = 0;
    put _i = 0;
    lab Parse::ScanBrack;
        put _Data <- _InputStr + _i;
        put _i = _i + 1;
        jump Parse::ScanBrackDone ~ _Data == 0;
        
        jump Parse::ScanBrackOpen ~ _Data == 40;
        jump Parse::ScanBrackClse ~ _Data == 41;
        jump Parse::ScanBrackUptd ~ _Data != 32;
        jump Parse::ScanBrack;

        lab Parse::ScanBrackOpen;
            put _Temp = _Temp + 1;
            jump Parse::ScanBrack;
        lab Parse::ScanBrackClse;
            put _Temp = _Temp - 1;
            jump Parse::ScanBrack;
                        
        lab Parse::ScanBrackUptd;
            jump Parse::ScanBrack ~ _LowBackLvl < _Temp; "lowest possible
            put _LowBackLvl = _Temp;
            jump Parse::ScanBrack;

    lab Parse::ScanBrackDone;

    "scan for operator
    put _ScanPtr = _InputStr + _InputSize;
    put _BrackLvl = 0;
    lab Parse::FindLvL1;
    put _Data <- _ScanPtr;

    push _BrackLvl;
    sub Math::Dec ~ _Data == 40;
    sub Math::Inc ~ _Data == 41;
    pull _BrackLvl;

    jump Parse::FindLvL1::Skip ~ _BrackLvl != _LowBackLvl;
    jump Parse::OpFound ~ _Data == _OpAdd;
    jump Parse::OpFound ~ _Data == _OpSub;
    lab Parse::FindLvL1::Skip;

    put _ScanPtr = _ScanPtr - 1;
    jump Parse::FindLvL1 ~ _ScanPtr != _InputStr;


    put _ScanPtr = _InputStr + _InputSize;
    put _BrackLvl = 0;
    lab Parse::FindLvL2;
    put _Data <- _ScanPtr;

    push _BrackLvl;
    sub Math::Dec ~ _Data == 40;
    sub Math::Inc ~ _Data == 41;
    pull _BrackLvl;

    jump Parse::FindLvL2::Skip ~ _BrackLvl != _LowBackLvl;
    jump Parse::OpFound ~ _Data == _OpMul;
    jump Parse::OpFound ~ _Data == _OpDiv;
    lab Parse::FindLvL2::Skip;

    "wow space for formatting, very cool (also this comment is useless)
    put _ScanPtr = _ScanPtr - 1;
    jump Parse::FindLvL2 ~ _ScanPtr != _InputStr;


    "set type of node to 1, for value
    put 1 -> _ThisNodePtr + 0;



    "push data to stack for parsing to int
    push 0; "terminator

    put _ScanPtr = _InputStr;
    lab PushLoop;
    put _Data <- _ScanPtr;
    put _ScanPtr = _ScanPtr + 1;

    jump PushLoop ~ _Data == 32;
    jump PushExit ~ _Data == 0;
    push _Data;
    jump PushLoop;
    lab PushExit;


    push 0; "config
    sub String::StackChar2Int;

    pull _ParsedInt;
    put _ParsedInt -> _ThisNodePtr + 1;

    return;



    "after finding the operator alloc space for the substrings
    lab Parse::OpFound;

        put _Op <- _ScanPtr;
        put _Op -> _ThisNodePtr + 1;

        "scan for brackets, only 'till found operator
        put _HeadCount = 0;
        put _TailCount = 0;

        put _i = _InputStr;
        lab Parse::CountHeadBrackets::Loop;
            jump Parse::CountHeadBrackets::Done ~ _i == _ScanPtr;
            put _Data <- _i;
            put _i = _i + 1;
            jump Parse::CountHeadBrackets::Open ~ _Data == 40; "chr(40) = '('
            jump Parse::CountHeadBrackets::Clse ~ _Data == 41; "chr(41) = ')'
            jump Parse::CountHeadBrackets::Loop;

            lab Parse::CountHeadBrackets::Open;
                put _HeadCount = _HeadCount + 1;
                jump Parse::CountHeadBrackets::Loop;
            lab Parse::CountHeadBrackets::Clse;
                put _HeadCount = _HeadCount - 1;
                jump Parse::CountHeadBrackets::Loop;                

        lab Parse::CountHeadBrackets::Done;

        push _InputStr;
        push _InputStr;
        sub String::StrLen;
        sub Math::Add;
        pull _i;
        lab Parse::CountTailBrackets::Loop;
            jump Parse::CountTailBrackets::Done ~ _i == _ScanPtr;
            put _i = _i - 1;
            put _Data <- _i;
            jump Parse::CountTailBrackets::Open ~ _Data == 40; "chr(40) = '('
            jump Parse::CountTailBrackets::Clse ~ _Data == 41; "chr(41) = ')'
            jump Parse::CountTailBrackets::Loop;

            lab Parse::CountTailBrackets::Open;
                put _TailCount = _TailCount - 1;
                jump Parse::CountTailBrackets::Loop;
            lab Parse::CountTailBrackets::Clse;
                put _TailCount = _TailCount + 1;
                jump Parse::CountTailBrackets::Loop;                

        lab Parse::CountTailBrackets::Done;


        put _HeadOffset = 0;
        lab Parse::HeadOffset::Loop;
            jump Parse::HeadOffset::Done ~ _HeadCount == 0;
            put _Data <- _HeadOffset + _InputStr;
            put _HeadOffset = _HeadOffset + 1;

            push _HeadCount;
            sub Math::Dec ~ _Data == 40;
            pull _HeadCount;
            
        jump Parse::HeadOffset::Loop;
        lab Parse::HeadOffset::Done;

        put _TailOffset = 0;
        lab Parse::TailOffset::Loop;
            jump Parse::TailOffset::Done ~ _TailCount == 0;
            put _Data <- (_InputSize + _InputStr - 1) - _TailOffset;
            put _TailOffset = _TailOffset + 1;

            push _TailCount;
            sub Math::Dec ~ _Data == 41;
            pull _TailCount;
            
        jump Parse::TailOffset::Loop;
        lab Parse::TailOffset::Done;


        "find size of substrings
        push _InputStr;
        sub String::StrLen;
        pull _MainSize;
        put _SubSize1 = (_ScanPtr - _InputStr) - _HeadOffset;
        put _SubSize2 = (((_MainSize + _InputStr) - _ScanPtr) - 1) - _TailOffset;

        new _SubSize1 + 1 _SubStrPtr1;
        new _SubSize2 + 1 _SubStrPtr2;

        "populate alloced memory
        push _InputStr + _HeadOffset;
        push _SubStrPtr1;
        push _SubSize1;
        sub String::MemCpy;
        put 0 -> _SubStrPtr1 + _SubSize1;

        push _ScanPtr + 1;
        push _SubStrPtr2;
        push _SubSize2;
        sub String::MemCpy;
        put 0 -> _SubStrPtr2 + _SubSize2;

        "save the ThisNodePtr
        push _ThisNodePtr;

        "save even the StrPtrs, for freeing memory later (can't have the shit leaking)
        push _SubStrPtr1;
        push _SubStrPtr2;


        "we keep all the stuff on the stack between calls, because the Parse subroutine is very dangerous
        push _SubStrPtr2;
        push _SubStrPtr1;

        sub Parse;

        "flip the values on the stack, because currently it looks like this:
        "|ThisNodePtr		| (for last Parse call)
        "|SubStrPtr1		| (for push to the stack)
        "====================
        "but for the next call we need the SubStrPtr1 to be ontop

        pull _SubNodePtr1;
        pull _SubStrPtr2;
        push _SubNodePtr1;
        push _SubStrPtr2;

        "now some may say: 'why save the SubStrPtr2 in the first place', this is because the Parse may override it and we need to save it

        sub Parse;

        "now after alot of work, get the final data
        pull _SubNodePtr2;
        pull _SubNodePtr1;

        "free the strings
        pull _SubStrPtr2;
        pull _SubStrPtr1;
        free _SubStrPtr1;
        free _SubStrPtr2;



        "restore the ThisNodePtr
        pull _ThisNodePtr;

        "override the ptr in the ThisNodePtr
        put _SubNodePtr1 -> _ThisNodePtr + 2;
        put _SubNodePtr2 -> _ThisNodePtr + 3;

        return;





lab Eval;
    pull _ReturnAddr;
    pull _Ptr;
    push _ReturnAddr;

    put _Type  <- _Ptr + 0;
    put _Value <- _Ptr + 1;

    jump Eval::FoundOp ~ _Type == 0;
    "delete returnAddr, place Value and rewrite returnAddr
    pull __;
    push _Value;
    push _ReturnAddr;
    return;




    lab Eval::FoundOp;
        "save Value for later operation eval
        push _Value;
        "print _Value;

        "prepare values;
        put _SubPtr2 <- _Ptr + 3;
        put _SubPtr1 <- _Ptr + 2;
        push _SubPtr2;
        push _SubPtr1;

        sub Eval;

        "switch stack
        pull _ReturnValue1;
        pull _SubPtr2;
        push _ReturnValue1;
        push _SubPtr2;

        sub Eval;

        "restore value
        pull _ReturnValue2;
        pull _ReturnValue1;
        pull _Value;
        push _ReturnValue1;
        push _ReturnValue2;

        "call helper routine for math lib
        sub Math::Add ~ _Value == _OpAdd;
        sub Math::Sub ~ _Value == _OpSub;
        sub Math::Mul ~ _Value == _OpMul;
        sub Math::Div ~ _Value == _OpDiv;


        "flip with return value
        pull _FinalValue;
        pull _ReturnAddr;
        push _FinalValue;
        push _ReturnAddr;


        return;

lab FreeExprTree;
    pull _ReturnAddr;
    pull _Ptr;
    push _ReturnAddr;

    put _Type  <- _Ptr + 0;
    put _Value <- _Ptr + 1;

    jump FreeExprTree::FoundOp ~ _Type == 0;

    free _Ptr;
    return;

    lab FreeExprTree::FoundOp;
        put _SubPtr2 <- _Ptr + 3;
        put _SubPtr1 <- _Ptr + 2;
        free _Ptr;
        push _SubPtr1;        
        push _SubPtr2;
    
        sub FreeExprTree;
        sub FreeExprTree;

        return;


"THIS IS THE MOST SCUFFED SHIT I'VE EVER WRITTEN
lab PrintExprTree;
    pull _ReturnAddr;
    pull _Ptr;
    push _ReturnAddr;
    

    put _Type  <- _Ptr + 0;
    put _Value <- _Ptr + 1;

    jump PrintExprTree::FoundOp ~ _Type == 0;
    jump PrintExprTree::FoundValue ~ _Type == 1;
    return;

    lab PrintExprTree::FoundOp;
        put _SubNodePtr1 <- _Ptr + 2;
        put _SubNodePtr2 <- _Ptr + 3;

        sub PrintExprTree::Format;
        putchr 40;
        putchr _Value;
        putchr 41;
        putchr 10;
        
        push _SubNodePtr2;
        push _SubNodePtr1;

        put _StopLevel = _StopLevel + 1; 
        sub PrintExprTree;
        put _StartLevelIncTrigger = 1;
        sub PrintExprTree;
        put _StopLevel  = _StopLevel  - 1;
        put _StartLevel = _StartLevel - 1;
        
        
        
        return;

    lab PrintExprTree::FoundValue;
        sub PrintExprTree::Format;
        print _Value;
        putchr 10;
        return;

    lab PrintExprTree::Format;
        put _i = 0;
        jump PrintExprTree::Format::Skip ~ _StopLevel == 0;
        lab PrintExprTree::Format::Loop;
            sub PrintExprTree::PrintSkip ~ _i < _StartLevel;
            sub PrintExprTree::PrintLevel ~ _i > _StartLevel;
            sub PrintExprTree::PrintLevel ~ _i == _StartLevel;
            put _i = _i + 1;
        jump PrintExprTree::Format::Loop ~ _i < _StopLevel;
        lab PrintExprTree::Format::Skip;
        sub PrintExprTree::Dash;
        sub PrintExprTree::Dash;
        sub PrintExprTree::Dash ~ _Type != 0;

        push _StartLevel;
        sub Math::Inc ~ _StartLevelIncTrigger > 0;
        pull _StartLevel;
        put _StartLevelIncTrigger = 0;
        
        return;

    lab PrintExprTree::Dash;
        putchr 45;
        return;

    lab PrintExprTree::PrintLevel;
        sub PrintExprTree::Spacer;
        sub PrintExprTree::PrintLevel::Line  ~ _StartLevelIncTrigger == 0;
        sub PrintExprTree::PrintLevel::Slash ~ _StartLevelIncTrigger != 0; 
        return;
        
    lab PrintExprTree::PrintLevel::Line;
        putchr 124;
        return;
        
    lab PrintExprTree::PrintLevel::Slash;
        jump PrintExprTree::PrintLevel::Line ~ _i + 1 < _StopLevel;
        putchr 96;
        return;

    lab PrintExprTree::PrintSkip;
        sub PrintExprTree::Spacer;
        putchr 32;
        return;

    lab PrintExprTree::Spacer;
        putchr 32;
        putchr 32;
        putchr 32;
        return;

lab Skip;



"new '2 * 2 - 2 + 1' _MainStr;
"new '3 * 2 + 10 + 7 * 7' _MainStr;
"new '18 + 51 - 2 - 83 + 17 * 100' _MainStr;

"new '2 + 3 * (4 + 1)' _MainStr;

new '12 + (5 * 6 - (24 / 3 + 8))' _MainStr;

"parse
push _MainStr;
sub Parse;
pull _TreePtr;

"evaluate
push _TreePtr;
sub Eval;
pull _FinalValue;

"print results
push _TreePtr;
sub PrintExprTree;

static '\n\n = ' _TempStr;
push _TempStr;
sub String::Print;
print _FinalValue;

"free memory, cuz' why not
free _MainStr;
push _TreePtr;
sub FreeExprTree;
